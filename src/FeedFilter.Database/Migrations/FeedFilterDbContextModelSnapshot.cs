// <auto-generated />
using System;
using FeedFilter.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FeedFilter.Database.Migrations
{
    [DbContext(typeof(FeedFilterDbContext))]
    partial class FeedFilterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FeedFilter.Database.DbModels.DbFeed", b =>
                {
                    b.Property<string>("FeedId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefaultDecision")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.HasKey("FeedId");

                    b.ToTable("Feeds", (string)null);
                });

            modelBuilder.Entity("FeedFilter.Database.DbModels.DbRule", b =>
                {
                    b.Property<string>("FeedId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("CustomXPath")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Decision")
                        .HasColumnType("integer");

                    b.Property<int>("Field")
                        .HasColumnType("integer");

                    b.Property<string>("TestExpression")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("TestType")
                        .HasColumnType("integer");

                    b.Property<string>("TestedAttributeName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("FeedId", "Index");

                    b.ToTable("Rules", (string)null);
                });

            modelBuilder.Entity("FeedFilter.Database.DbModels.DbRule", b =>
                {
                    b.HasOne("FeedFilter.Database.DbModels.DbFeed", null)
                        .WithMany("Rules")
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FeedFilter.Database.DbModels.DbFeed", b =>
                {
                    b.Navigation("Rules");
                });
#pragma warning restore 612, 618
        }
    }
}
